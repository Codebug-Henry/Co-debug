// RUTAS user - users

--------------------------------------------------------------------------------------------------------------------

<> router.post("/user",postUser) <>

->DESCRIPCION:esta ruta es para crear un usuario cuando se registra

->REQUERIMIENTOS: por body enviar datos del usuario. 

{
  sub,
  name,
  nickname,
  email,
  locale,
  picture
}

->RESPUESTA: si el usuario existe, no lo crea y -> "el usuario existe", sino-> "se a creado correctamente"

--------------------------------------------------------------------------------------------------------------------

<> router.get("/users/topTen",getTopTen) <>

->DESCRIPCION:esta ruta es para obtener los usuarios con los 10 mayores puntajes

->REQUERIMIENTOS: ninguno

->RESPUESTA: un arreglo de tamaño 10, con dichos usuarios

[
    {
        myTeachPoints,
        name,
        nickname,
        picture,
        sub
    }
    .
    .
    .
    {
        myTeachPoints,
        name,
        nickname,
        picture,
        sub
    }
]

--------------------------------------------------------------------------------------------------------------------

<> router.get("/users",getRanking) <>

->DESCRIPCION:esta ruta es para obtener todos los usuarios para rankearlos

->REQUERIMIENTOS: por query deberan enviar la variable sort para definir como ordenarlos (ascendente/descendente)

/?sort=ascendent/descendent

->RESPUESTA: un arreglo con todos los usuarios, en un principio acomodados de mayor a menos puntaje

[
    {
        myTeachPoints,
        name,
        nickname,
        picture,
        sub
    }
    .
    .
    .
    {
        myTeachPoints,
        name,
        nickname,
        picture,
        sub
    }
]

--------------------------------------------------------------------------------------------------------------------

<> router.get("/user/:sub",getUserInfo) <>

->DESCRIPCION:esta ruta es para devolver toda la info de un usuario

->REQUERIMIENTOS: por params enviar sub de el usuario  

/${sub}=>/(text de el auth0)

->RESPUESTA: un objeto que contiene toda la info del usuario

{
    sub,
    name,
    nickname,
    email,
    myTeachPoints,
    picture,
    statusAdmin,
    statusBanned,
    cantFav,
    cantQuest,
    cantAns
}

--------------------------------------------------------------------------------------------------------------------

<> router.put("/user/:sub",putUserInfo) <>

->DESCRIPCION:esta ruta es para actualizar la info de un usuario

->REQUERIMIENTOS: por params enviar sub de el usuario, por body enviar props a cambiar  

/${sub}=>/(text de el auth0)

body= obj con props cambiadas

{
    name,
    nickname,
    email,
    locale,
    picture
}

->RESPUESTA: un objeto con el user modificado

{
    name,
    nickname,
    email,
    locale,
    picture
}

--------------------------------------------------------------------------------------------------------------------

<> router.delete("/user/:sub",deleteUser) <>

->DESCRIPCION:esta ruta es para borrar un usuario de la base de datos

->REQUERIMIENTOS: por params enviar sub de el usuario  

/${sub}=>/(text de el auth0)

->RESPUESTA: un string indicando que "el usuario a sido eliminado correctamente"

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

// RUTAS question - questions

--------------------------------------------------------------------------------------------------------------------

router.post("/question",postQuestion)

->DESCRIPCION: esta ruta es para crear una pregunta.

->REQUERIMIENTOS: por body enviar datos de la pregunta. 

{
  sub,
  //tag,
  text,//contenido de la pregunta
  title//titulo de la pregunta
}

>RESPUESTA:

{
  user:{
    sub,
    name,
    nickname
  },
  //tag,
  title,
  teachPoints,
  text,
  likes,
}

____________________

router.get("/question/:id",getSingleQuestion)

->DESCRIPCION: esta ruta es para acceder al detalle de una pregunta con todas sus respuestas.

->REQUERIMIENTOS: por params enviar id de pregunta. 

->RESPUESTA: devuelvo un objeto con la info de la pregunta.

{
  user:{
    sub,
    name,
    nickname
  },
  //tag,
  title,
  teachPoints,
  text,
  likes,
  cantAnswers,
  respuestas:[
                {
                    text,
                    likes,
                }
                .
                .
                .
                {
                    text,
                    likes,
                }
            ]
}

____________________

router.put("/question",putUserQuestion)

->DESCRIPCION: esta ruta es para poder modificar una pregunta.

->REQUERIMIENTOS: por body enviar el id de la pregunta + campo a actualizar. 

{
  sub,
  id,
  //tag,
  text,//contenido de la pregunta
  title//titulo de la pregunta
}

->RESPUESTA: devuelvo un objeto con la info actualizada.

{
  //tag,
  text,//contenido de la pregunta
  title//titulo de la pregunta
}

____________________

router.delete("/question/:id",deleteUserQuestion)

->DESCRIPCION: esta ruta es para eliminar una pregunta (con todas sus respuestas).

->REQUERIMIENTOS: por params enviar id de pregunta. 

->RESPUESTA: “pregunta eliminada”

____________________

router.put("/questions/favourites",putFavourites)

->DESCRIPCION: esta ruta es para agregar o quitar preguntas de la lista de favotitos.

->REQUERIMIENTOS: recibe por query ?sub=" "&id=" "&add=boolean

(add=>true agrega/false borra)
(sub=>sub del usuario)
(id=>id de la pregunta)

->RESPUESTA: agregada o quitada correctamente

____________________

router.get("/questions/favourites/:sub",getFavourites)

->DESCRIPCION: esta ruta es para acceder a mis preguntas favoritas.

->REQUERIMIENTOS: por params enviar sub del usuario. 

->RESPUESTA: devuelvo un arreglo con las favoritas de ese usuario.

{
  favourites:[
                {
                    id,
                    //tag,
                    title,
                    teachPoints,
                    text,
                    likes,
                    cantAnswers,
                }
                .
                .
                .
                {
                    id,
                    //tag,
                    title,
                    teachPoints,
                    text,
                    likes,
                    cantAnswers,
                }
  ]
}
  
____________________

router.get("/questions",getAllQuestions)

->DESCRIPCION: esta ruta es para acceder a todas las preguntas.

->REQUERIMIENTOS: puede traer por query ?search o ?sort para buscar u ordenar, en caso de no traer nada simplemente accedo a todas las preguntas.

 ?search=" "&sort=" "

(search=>string que esta buscando en texto/titulo)
(sort=>string que define ordenamiento(ascendent/descendent))

->RESPUESTA: devuelvo un arreglo de objetos con la info de las preguntas.

[
    {
        id,
        sub,
        //tag,
        title,
        teachPoints,
        text,
        likes,
        cantAnswers,
    }
    .
    .
    .
    {
        id,
        sub,
        //tag,
        title,
        teachPoints,
        text,
        likes,
        cantAnswers,
    }
  ]

____________________

router.get("/questions/:sub",getUserQuestions)
 
->DESCRIPCION: esta ruta es para acceder a todas mis preguntas.

->REQUERIMIENTOS: recibo “sub” por params y puede traer por query ?answered para filtrar por preguntas respondidas o no respondidas, en caso de no traer nada simplemente accedo a todas las preguntas del usuario.

 ?answered=" "

(answered=>true/false)

->RESPUESTA: devuelvo un arreglo de objetos con la info de mis preguntas.

[
    {
        id,
        //tag,
        title,
        teachPoints,
        text,
        likes,
        cantAnswers,
    }
    .
    .
    .
    {
        id,
        //tag,
        title,
        teachPoints,
        text,
        likes,
        cantAnswers,
    }
  ]

____________________

RUTAS ANSWER

-------------------------------

<> router.post("/answer",postAnswer) <>

->DESCRIPCION: esta ruta es para que el usuario pueda responder una pregunta y se agregue al hilo de respuestas

->REQUERIMIENTOS: por body enviar sub del usuario, id de la pregunta y el texto de la respuesta 

{
  sub,
  id,
  text
}

->RESPUESTA: en caso de ser necesaria -> "respuesta creada correctamente"

-------------------------------

<> router.put("/answer",putAnswer) <>

->DESCRIPCION: esta ruta es para que el usuario pueda editar una de sus respuestas

->REQUERIMIENTOS: por body enviar el texto de la respuesta editado y el id

{  
  id,
  text
}

->RESPUESTA: en caso de ser necesaria -> el texto de la respuesta editada

{
  text
}

-------------------------------

<> router.delete("/answer/:id",deleteAnswer) <>

->DESCRIPCION: esta ruta es para que el usuario pueda eliminar una de sus respuestas

->REQUERIMIENTOS: por params enviar el id de la respuesta

/answer/${id}

->RESPUESTA: en caso de ser necesaria -> "respuesta eliminada correctamente"

-------------------------------

<> router.get("/answers/:sub",getAnswers) <>

->DESCRIPCION: esta ruta es para que el usuario pueda ver sus respuestas publicadas con sus preguntas asociadas

->REQUERIMIENTOS: por params enviar el sub del usuario

/answers/${sub}

->RESPUESTA: un arreglo de las respuestas incluyendo los datos de la pregunta asociada a cada una

[
	{
        id,
        text,
        likes,
        question:{
                    id,
                    titulo
                }
	}
    .
    .
    .
    {
        id,
        text,
        likes,
        question:{
                    id,
                    titulo
                }
	}
]

//Anotaciones/Recomndaciones/hagan caso mierda

la info del aut0 es utilizada por el back, nosotros les devolveremos la info del back y esa sera renderizada(ya que no se puede modifcar la info del usuario en el auth0, pero si el usuario en la base de datos)


